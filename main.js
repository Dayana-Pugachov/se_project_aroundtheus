!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i,this._isLiked=e.isLiked}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_setEventListeners(){this._element.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick(this._link,this._name)})),this._likeButton=this._element.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._element.querySelector(".card__trash-button").addEventListener("click",(()=>{this._handleDeleteClick(this)}))}removeCard(){this._element.remove()}generateCard(){this._element=this._getTemplate(),this._setEventListeners(),this._renderLikes();const e=this._element.querySelector(".card__title"),t=this._element.querySelector(".card__image");return t.setAttribute("src",this._link),t.setAttribute("alt",this._name),e.textContent=this._name,this._element}getId(){return this._id}getLikeStatus(){return this._isLiked}setLikeStatus(e){this._isLiked=e,this._renderLikes()}_renderLikes(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._element=t}_showError(e,t){const s=this._element.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideError(e){const t=this._element.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled","")):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled",""))}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e,e.validationMessage)}_setEventListeners(){this._inputList=Array.from(this._element.querySelectorAll(this._inputSelector)),this._buttonElement=this._element.querySelector(this._submitButtonSelector),this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._element.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this._hideError(e)}))}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){this._popupElement=document.querySelector(e)}openModal(){document.addEventListener("keydown",this._handleEsc),this._popupElement.classList.add("modal_opened")}closeModal(){document.removeEventListener("keydown",this._handleEsc),this._popupElement.classList.remove("modal_opened")}_handleEsc=e=>{"Escape"===e.key&&this.closeModal()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target===this._popupElement||e.target.classList.contains("modal__close"))&&this.closeModal()}))}}class i extends r{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super(t),this._handleFormSubmit=s,this._popupForm=this._popupElement.querySelector(".modal__form"),this._saveButton=this._popupElement.querySelector(".modal__save")}_getInputValues(){return this._inputList=this._popupElement.querySelectorAll(".modal__input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}closeModal(){this._popupForm.reset(),super.closeModal()}setButtonText(e){this._saveButton.textContent=e}}const n=document.querySelector(".profile__edit-button"),o=document.querySelector(".modal__form"),a=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__avatar-wrapper"),c=o.querySelector("#name-input-js"),d=o.querySelector("#description-input-js"),h={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"},u=document.querySelector("#editProfile-modal-form"),_=document.querySelector("#addCard-modal-form"),m=document.querySelector("#avatar-modal-form"),p=new class{constructor(){this._baseUrl="https://around-api.en.tripleten-services.com/v1",this._headers={authorization:"5bd639c7-c1c3-496d-947f-3773995c6d1b","Content-Type":"application/json"}}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}loadUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}editUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}addNewCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}loadPageContent(){return Promise.all([this.loadUserInfo(),this.getInitialCards()])}}({});let v;p.loadPageContent().then((e=>{let[t,r]=e;S.setUserInfo(t.name,t.about),S.setAvatar(t.avatar),v=new s({items:r.reverse(),renderer:e=>{const t=C(e);v.addItem(t)}},".gallery__list"),v.renderItems()})).catch((e=>console.error(e)));const S=new class{constructor(e){let{profileNameSelector:t,profileDescriptionSelector:s,profileAvatarSelector:r}=e;this._profileName=document.querySelector(t),this._profileDescription=document.querySelector(s),this._profileAvatar=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,description:this._profileDescription.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileDescription.textContent=t}setAvatar(e){this._profileAvatar.src=e}}({profileNameSelector:".profile__title",profileDescriptionSelector:".profile__description",profileAvatarSelector:".profile__avatar"});n.addEventListener("click",(()=>{const e=S.getUserInfo();c.value=e.name,d.value=e.description,B.resetValidation(),f.openModal()}));const f=new i({popupSelector:"#edit-modal",handleFormSubmit:function(e){f.setButtonText("Saving..."),p.editUserInfo(e.name,e.description).then((e=>{S.setUserInfo(e.name,e.about),f.closeModal(),B.toggleButtonState()})).catch((e=>console.error(e))).finally((()=>{f.setButtonText("Save")}))}});f.setEventListeners();const E=new i({popupSelector:"#avatar-modal",handleFormSubmit:function(e){E.setButtonText("Saving..."),p.updateAvatar(e.link).then((e=>{S.setAvatar(e.avatar),E.closeModal(),w.toggleButtonState()})).catch((e=>console.error(e))).finally((()=>{E.setButtonText("Save")}))}});E.setEventListeners(),l.addEventListener("click",(()=>{w.resetValidation(),E.openModal()}));const k=new class extends r{constructor(e){let{popupSelector:t}=e;super(t),this._previewImage=document.querySelector(".modal__image"),this._previewDescription=document.querySelector(".modal__description")}openModal(e,t){this._previewImage.setAttribute("src",e),this._previewImage.setAttribute("alt",t),this._previewDescription.textContent=t,super.openModal()}}({popupSelector:"#previewModal"});function L(e,t){k.openModal(e,t)}k.setEventListeners();const b=new i({popupSelector:"#add-modal",handleFormSubmit:function(e){b.setButtonText("Saving..."),p.addNewCard(e.name,e.link).then((e=>{const t=C(e);v.addItem(t),b.closeModal(),q.toggleButtonState()})).catch((e=>console.error(e))).finally((()=>{b.setButtonText("Create")}))}});function g(e){I.openModal(e)}function C(t){return new e(t,"#card-template",L,g,y).generateCard()}function y(e){const t=e.getId();e.getLikeStatus()?p.unlikeCard(t).then((()=>{e.setLikeStatus(!1)})).catch((e=>console.error(`${e} Something went wrong`))):p.likeCard(t).then((()=>{e.setLikeStatus(!0)})).catch((e=>console.error(`${e} Something went wrong`)))}a.addEventListener("click",(()=>{q.resetValidation(),b.openModal()})),b.setEventListeners();const I=new class extends r{constructor(e){let{popupSelector:t,handleSubmit:s}=e;super(t),this._handleSubmit=s,this._confirmButton=document.querySelector(".modal__save_confirm")}setEventListeners(){this._confirmButton.addEventListener("click",(()=>{this._handleSubmit(this._cardData)})),super.setEventListeners()}openModal(e){this._cardData=e,super.openModal()}}({popupSelector:"#confirmationModal",handleSubmit:function(e){const t=e.getId();p.deleteCard(t).then((()=>{e.removeCard()})).catch((e=>console.error(e))),I.closeModal()}});I.setEventListeners();const B=new t(h,u),q=new t(h,_),w=new t(h,m);B.enableValidation(),q.enableValidation(),w.enableValidation(),p.getInitialCards().then((e=>{console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,